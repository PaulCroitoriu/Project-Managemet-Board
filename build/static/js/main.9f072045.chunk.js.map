{"version":3,"sources":["components/Ticket/Ticket.jsx","components/Lane/Lane.js","containers/Board.js","withDataFetching.js","components/Header/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["TicketWrapper","styled","div","Title","h3","Body","p","Ticket","ticket","onDragStart","draggable","e","id","title","body","LaneWrapper","h2","TicketsWrapper","Alert","Lane","laneId","loading","tickets","error","onDragOver","onDrop","map","key","BoardWrapper","withDataFetching","WrappedComponent","WithDataFetching","props","state","data","fetch","this","dataSource","json","dataJson","setState","message","React","Component","displayName","name","dataTransfer","setData","preventDefault","getData","filter","parseInt","lane","prevProps","lanes","HeaderWrapper","h1","Header","GlobalStyle","createGlobalStyle","AppWrapper","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9f072045.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TicketWrapper = styled.div`\n  background: #c6b497;\n  padding: 20px;\n  border-radius: 20px;\n  :not(:last-child) {\n    margin-bottom: 5%;\n  }\n`;\n\nconst Title = styled.h3`\n  width: 100%;\n  margin: 0px;\n`;\n\nconst Body = styled.p`\n  width: 100%;\n`;\n\nconst Ticket = ({ ticket, onDragStart }) => (\n  <TicketWrapper draggable onDragStart={e => onDragStart(e, ticket.id)}>\n    <Title>{ticket.title}</Title>\n    <Body>{ticket.body}</Body>\n  </TicketWrapper>\n);\n\nexport default Ticket;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Ticket from \"../Ticket/Ticket\";\n\nconst LaneWrapper = styled.div`\n  list-style: none;\n  text-align: left;\n  padding: 0;\n  background: #839b97;\n  border-radius: 20px;\n  min-height: 50vh;\n  width: 20vw;\n\n  @media (max-width: 768px) {\n    margin-bottom: 5%;\n  }\n`;\n\nconst Title = styled.h2`\n  width: 100%;\n  padding-bottom: 10px;\n  text-align: center;\n  border-bottom: 1px solid darkGray;\n`;\n\nconst TicketsWrapper = styled.div`\n  padding: 5%;\n`;\n\nconst Alert = styled.div`\n  text-align: center;\n`;\n\nconst Lane = ({\n  laneId,\n  title,\n  loading,\n  tickets,\n  error,\n  onDragStart,\n  onDragOver,\n  onDrop,\n}) => (\n  <LaneWrapper onDragOver={e => onDragOver(e)} onDrop={e => onDrop(e, laneId)}>\n    <Title>{title}</Title>\n\n    {(loading || error) && <Alert>{loading ? \"Loading...\" : error}</Alert>}\n    <TicketsWrapper>\n      {tickets.map(ticket => (\n        <Ticket onDragStart={onDragStart} key={ticket.id} ticket={ticket} />\n      ))}\n    </TicketsWrapper>\n  </LaneWrapper>\n);\n\nexport default Lane;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport withDataFetching from \"../withDataFetching\";\nimport Lane from \"../components/Lane/Lane\";\n\nconst BoardWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin: 5%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nclass Board extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      tickets: [],\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data !== this.props.data) {\n      this.setState({ tickets: this.props.data });\n    }\n  }\n\n  // onDragEvent handler - fires when the dragging operation is started\n  onDragStart = (e, id) => {\n    e.dataTransfer.setData(\"id\", id);\n  };\n\n  onDragOver = e => {\n    e.preventDefault();\n  };\n\n  onDrop = (e, laneId) => {\n    const id = e.dataTransfer.getData(\"id\");\n\n    const tickets = this.state.tickets.filter(ticket => {\n      if (ticket.id === parseInt(id)) {\n        ticket.lane = laneId;\n      }\n      return ticket;\n    });\n\n    this.setState({\n      ...this.state,\n      tickets,\n    });\n  };\n\n  render() {\n    const { lanes, loading, error } = this.props;\n    const { tickets } = this.state;\n\n    return (\n      <BoardWrapper>\n        {lanes.map(lane => (\n          <Lane\n            key={lane.id}\n            laneId={lane.id}\n            loading={loading}\n            error={error}\n            onDragStart={this.onDragStart}\n            onDragOver={this.onDragOver}\n            onDrop={this.onDrop}\n            title={lane.title}\n            tickets={tickets.filter(ticket => ticket.lane === lane.id)}\n          />\n        ))}\n      </BoardWrapper>\n    );\n  }\n}\n\nexport default withDataFetching(Board);\n","import React from \"react\";\n\nexport default function withDataFetching(WrappedComponent) {\n  class WithDataFetching extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        loading: true,\n        data: [],\n        error: \"\",\n      };\n\n      //   console.log(props);\n    }\n\n    async componentDidMount() {\n      try {\n        const data = await fetch(this.props.dataSource);\n        // console.log(this.props);\n        const dataJson = await data.json();\n\n        if (dataJson) {\n          this.setState({\n            data: dataJson,\n            loading: false,\n          });\n        }\n      } catch (error) {\n        this.setState({\n          error: error.message,\n          loading: false,\n        });\n      }\n    }\n\n    render() {\n      const { data, loading, error } = this.state;\n      return (\n        <WrappedComponent\n          data={data}\n          loading={loading}\n          error={error}\n          {...this.props}\n        />\n      );\n    }\n  }\n  WithDataFetching.displayName = `WithDataFetching(${WrappedComponent.name})`;\n  return WithDataFetching;\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst HeaderWrapper = styled.div`\n  background-color: #34626c;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst Title = styled.h1`\n  height: 64px;\n  pointer-events: none;\n`;\n\nconst Header = () => (\n  <HeaderWrapper>\n    <Title>Project Management Board</Title>\n  </HeaderWrapper>\n);\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Board from \"./Board\";\nimport Header from \"../components/Header/Header\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nconst AppWrapper = styled.div`\n  text-align: center;\n`;\n\nclass App extends Component {\n  render() {\n    const lanes = [\n      { id: 1, title: \"To Do\" },\n      { id: 2, title: \"In Progress\" },\n      { id: 3, title: \"Review\" },\n      { id: 4, title: \"Done\" },\n    ];\n\n    return (\n      <>\n        <GlobalStyle />\n        <AppWrapper>\n          <Header />\n          <Board lanes={lanes} dataSource={\"../../data/data.json\"} />\n        </AppWrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}